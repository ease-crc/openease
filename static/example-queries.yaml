
sections:
- name: Activity knowledge
  topics:

  - id: occurrences
    name: Occurrences
    icon: fa-car-crash
  
  - id: participation
    name: Participation
    icon: fa-people-carry
  
  - id: action_structure
    name: Structure
    icon: fa-sitemap
  
  - id: action_trans
    name: Transformation
    icon: fa-random
  
  - id: concept
    name: Conceptualization
    icon: fa-object-group
  
  - id: context
    name: Contextualization
    icon: fa-expand

- name: Environment knowledge
  topics:
  
  - id: appearance
    name: Appearance
    icon: fa-shapes
  
  - id: env_structure
    name: Structure
    icon: fa-sitemap
  
  - id: env_kin
    name: Kinematics
    icon: fa-running
  
  - id: env_dyn
    name: Dynamics
    icon: fa-fill-drip
  
  - id: env_phy
    name: Naive physics
    icon: fa-utensils

- name: Agent knowledge
  topics:
  
  - id: agent_structure
    name: Structure
    icon: fa-sitemap
  
  - id: agent_kin
    name: Kinematics
    icon: fa-running

- name: Plan
  topics:

  # - id: plan_task
  #   name: Goal
  #   icon: fa-check
  - id: plan_task
    name: Task
    icon: fa-list-ol

  - id: plan_structure
    name: Plan Phases
    icon: fa-sitemap


  # - id: plan_structure
  #   name: Image Schema
  #   icon: fa-object-group
  
######## ACTION
######## Occurrences
#################
sub_topics:
- topic: occurrences
  name: Events
  description: About occurrences of events in an episode.
  query_groups:
  - description: Which events occurred?
    queries:
    - is_event(Evt)
  - description: When did events occur?
    queries:
    - event_interval(Evt, Begin, End)
    binding:
      var: Evt
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event
      description: When did this event occur?
  - description: When did the first event start?
    queries:
    - |
      findall([Begin, Evt],
        event_interval(Evt, Begin, _),
        StartTimes),
      min_member([MinTime, FirstEvt], StartTimes).
  - description: When did the last event end?
    queries:
    - |
      findall([Begin, Evt],
        event_interval(Evt, Begin, _),
        EndTimes),
      max_member([MaxTime, LastEvt], EndTimes).

- topic: occurrences
  name: Duration
  description: About the length of events that occured in an episode.
  query_groups:
  - description: What is the duration of events that occurred?
    queries:
    - |
      event_interval(Evt, Begin, End),
      Duration is End - Begin.
    binding:
      var: Evt
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event
      description: What is the duration of this event?
  - description: What is the longest event that occurred?
    queries:
    - |
      findall([Duration, Evt],
        (  event_interval(Evt, Begin, End),
           number(End),
           Duration is End - Begin
        ),
        Durations),
      max_member([MaxDuration, LongestEvt], Durations).
  - description: What is the shortest event that occurred?
    queries:
    - |
      findall([Duration,Evt],
        (  event_interval(Evt, Begin, End),
           number(End),
           Duration is End - Begin
        ),
        Durations),
      min_member([MinDuration, ShortestEvt], Durations).

# TODO: enable this section. But I think it won't work at the moment
#       for non-grounded vars.
#       probably we could implement the relations in aggregate queries!
#- topic: occurrences
#  name: Interval Algebra
#  description: About temporal relationships that hold between events.
#  query_groups:
#  - description: Which events are started by others?
#    queries:
#    - interval_starts(Evt1,Evt2)
#  - description: Which events are stopped by others?
#    queries:
#    - interval_stops(Evt1,Evt2)
#  - description: Which events overlap each other?
#    queries:
#    - interval_overlaps(Evt1,Evt2)
#  - description: Which events occur before others?
#    queries:
#    - interval_before(Evt1,Evt2)
#  - description: Which events occur during others?
#    queries:
#    - interval_during(Evt1,Evt2)

#################
######## ACTION
######## Participation
#################
- topic: participation
  name: Events
  description: About the participation of objects in events.
  query_groups:
  - description: Which objects participate in which action?
    queries:
    - has_participant(Evt, Obj)
    binding:
      var: Evt
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event
      description: What are the participants of this event?
    binding:
      var: Obj
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Object
      description: In which events did this object participate?
  - description: What is the list of participants for each event?
    queries:
    - |
      is_action(Act),
      findall(Obj,
        has_participant(Act, Obj),
        Participants)

- topic: participation
  name: Object Types
  description: About the the types of objects that participate in events.
  query_groups:
  - description: What agent participated in events?
    queries:
    - |
      has_participant(Evt, Obj),
      is_agent(Obj)
  - description: What physical artifacts participated in events?
    queries:
    - |
      has_participant(Evt, Obj),
      is_physical_artifact(Obj)

#################
######## ACTION
######## Structure
#################
- topic: action_structure
  name: Action Phases
  description: About how actions are composed into distinct phases.
  query_groups:
  - description: What are the direct sub-events of an action?
    queries:
    - |
      is_action(Act),
      findall(Sub,
        triple(Act, dul:hasConstituent, Sub),
        Phases).
    binding:
      var: Act
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event
      description: What are the direct phases of this event?
  - description: What is the transitive sub-event closure of an action?
    queries:
    - |
      is_action(Act),
      findall(Sub,
        triple(Act, transitive(dul:hasConstituent), Sub),
        Phases).
    binding:
      var: Act
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event
      description: What is the transitive sub-event closure of this event?

#################
######## ACTION
######## Transformation
#################
- topic: action_trans
  name: Coming Soon
  #name: Agent transform
  #description: About how action cause transformations of objects.
  #query_groups:
  #- description: lorem ipsum
  #  queries:
  #  - |
  #    fail.

#################
######## ACTION
######## Conceptualization
#################
- topic: concept
  name: Tasks
  description: About the tasks executed by an action.
  query_groups:
  - description: Which actions execute a navigation task?
    queries:
    - |
      has_type(Tsk, soma:'Navigating'),
      executes_task(Act, Tsk).
  - description: Which actions execute a grasping task?
    queries:
    - |
      has_type(Tsk, soma:'Grasping'),
      executes_task(Act, Tsk).

- topic: concept
  name: Roles
  description: About the roles that object play in an action.
  query_groups:
  - description: What objects play the role of an agent?
    queries:
    - |
      has_type(Role, soma:'AgentRole'),
      task_role(Tsk, Role),
      executes_task(Act, Tsk),
      has_role(Obj, Role) during Act.
  - description: What objects play the role of an item?
    queries:
    - |
      has_type(Role, soma:'Item'),
      task_role(Tsk, Role),
      executes_task(Act, Tsk),
      has_role(Obj, Role) during Act.
  #- description: What objects play the role of an instrument?
  #  queries:
  #  - |
  #    has_role(Obj, Role, soma:'Instrument'),
  #    task_role(Tsk, Role),
  #    executes_task(Act, Tsk).
  - description: Did an arm play a role in an action?
    queries:
    - |
      has_type(Arm, soma:'Arm'),
      has_participant(Act, Arm),
      has_role(Arm, Role) during Act.

#################
######## ACTION
######## Contextualization
#################
- topic: context
  name: Situations
  description: About the situational context in which an episode took place.
  query_groups:
  - description: Which episodes are contained in the NEEM?
    queries:
    - is_episode(Ep).
  - description: What are the agents included in episodes?
    queries:
    - |
      triple(Ep,dul:includesAgent,Agent).
  - description: How many actions were executed during the episode?
    queries:
    - |
      is_episode(Ep),
      setof(Act,
        (  triple(Ep, dul:includesAction, SupAct),
           triple(SupAct, transitive(dul:hasConstituent), Act)
        ),
        SetOfAct),
      length(SetOfAct,NumAct).

#################
######## OBJECT
######## Appearance
#################
- topic: appearance
  name: Shapes
  description: About the shape quality of objects.
  query_groups:
  - description: What is the shape of objects?
    queries:
    - object_shape(Obj, _, Shape, _, _).
    binding:
      var: Obj
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#PhysicalObject
      description: What is the shape of this object?
  - description: What are the shapes of the objects that participate in an action?
    queries:
    - |
      has_participant(Act, Obj),
      object_shape(Obj, _, ShapeTerm, _, _).

#################
######## OBJECT
######## Structure
#################
- topic: env_structure
  name: Components
  description: About how objects in the environment are composed of components.
  query_groups:
  - description: What are the direct parts of an object?
    queries:
    - |
      is_physical_artifact(Obj),
      findall(Sub,
        triple(Obj, dul:hasComponent, Sub),
        Components).
    binding:
      var: Obj
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Object
      description: What are the direct components of this object?
  - description: What is the transitive sub-event closure of an action?
    queries:
    - |
      is_physical_artifact(Obj),
      findall(Sub,
        triple(Obj, transitive(dul:hasComponent), Sub),
        Components).
    binding:
      var: Obj
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Object
      description: What is the transitive component closure of this object?

#################
######## OBJECT
######## Kinematics
#################
- topic: env_kin
  name: Structure
  description: About how objects are composed of links and joints.
  query_groups:
  - description: What is the base link of objects?
    queries:
    - has_base_link(Obj, Link).
  - description: What are the links connected via a revolute joint?
    queries:
    - |
      has_type(Joint, urdf:'RevoluteJoint'),
      has_child_link(Joint, Child),
      has_parent_link(Joint, Parent).

#################
######## OBJECT
######## Dynamics
#################
- topic: env_dyn
  name: Coming Soon
  # TODO:
  #- description: How much effort is needed to open doors in the environment?

#################
######## OBJECT
######## Naive physics
#################
- topic: env_phy
  name: Coming soon
  # TODO:
  #- description: What objects can be used as container?
  #- description: Where can this item be parked?

#################
######## AGENT
######## Structure
#################
- topic: agent_structure
  name: Components
  description: About how agents are composed of components.
  query_groups:
  - description: What are the direct parts of an agent?
    queries:
    - |
      is_agent(Agent),
      setof(Part,
        triple(Agent, dul:hasComponent, Part),
        Components).
  - description: What is the transitive component closure of an agent?
    queries:
    - |
      is_agent(Agent),
      setof(Part,
        triple(Agent, transitive(dul:hasComponent), Part),
        Components).
  - description: How many parts does the agent have?
    queries:
    - |
      is_agent(Agent),
      setof(Part,
        triple(Agent, transitive(dul:hasComponent), Part),
        Components),
      length(Components, NumParts).
  # TODO:
  #- description: How many sensors does the agent have?
  #- description: What are the actuators of the agent?

#################
######## AGENT
######## Kinematics
#################
- topic: agent_kin
  name: Structure
  description: About how agent body parts are composed of links and joints.
  query_groups:
  - description: What is the base link of components of the agent?
    queries:
    - |
      is_agent(Agent),
      triple(Agent, dul:hasComponent, Part),
      has_base_link(Part, Link).
  - description: What are the links connected via a revolute joint?
    queries:
    - |
      has_type(Joint, urdf:'RevoluteJoint'),
      has_child_link(Joint, Child),
      has_parent_link(Joint, Parent).
  # TODO:
  #- description: What are the limits of the joint?
  #- description: How far can the agent reach with end-effectors?

#  name: Links
#  description: Links of the robot
#  query_groups:
#  - description: What is the root link of the robot?
#    queries:
#    - |
#      has_type(Robot,urdf:'Robot'),
#      urdf_root_link(Robot, Root).
#  - description: What is the inertia and mass of the links of the robot?
#    queries:
#    - |
#      has_type(Robot,urdf:'Robot'),
#      urdf_link_names(Robot,LinkList),
#      member(Link,LinkList),
#      urdf_link_inertial(Robot, Link, Inertia, _, Mass).
#
#- topic: agent_kin
#  name: Joints
#  description: Links of the robot
#  query_groups:
#  - description: What are the limits of the robot's joints?
#    queries:
#    - |
#      has_type(Robot,urdf:'Robot'),
#      urdf_joint_names(Robot,JointList),
#      member(Joint,JointList),
#      urdf_joint_hard_limits(Robot,Joint,PosLimits,VelMax,EffMax).
#  - description: What is the friction of the robot's joints?
#    queries:
#    - |
#      has_type(Robot,urdf:'Robot'),
#      urdf_joint_names(Robot,JointList),
#      member(Joint,JointList),
#      urdf_joint_friction(Robot,Joint,Friction).
#################
######## Plan
######## Task
#################
sub_topics:
- topic: plan_task
  name: Goal
  description: About the goal of the task executed in the plan
  query_groups:
  - description: What are the object roles that should be part of the goal state of the task?
    queries:
    - |
      triple(Plan, dul:definesTask, TaskInstance),
      has_type(TaskInstance, Task),
      subclass_of(Task, soma:'PhysicalTask'),
      triple(Plan, soma:hasGoal, Goal),
      findall(Role,
        (triple(Goal, dul:usesConcept, RoleInd),
        has_type(RoleInd, Role),
        subclass_of(Role, dul:'Role')),
      Roles).
  - description: What are the image schema relations that should hold in the goal state when the task is executed?
    queries:
    - |
      kb_call((has_type(Tsk, Task),
      subclass_of(Task, soma:'PhysicalTask'),
      triple(Plan, dul:definesTask, TaskInstance),
      has_type(TaskInstance, Task),
      triple(Plan, soma:hasGoal, Goal),
      has_type(Goal, dul:'Goal'))),
      findall(Relation,
        (triple(Goal, dul:hasPart, ISInstance),
        has_type(ISInstance, Relation),
        subclass_of(Relation, soma:'ImageSchemaTheory')),
      ImageSchemaRelations).
- topic: plan_task
  name: Structure
  description: About the steps followed to complete a complex task
  query_groups:
  - description:  What are the sub tasks of a complex task executed by an action?
    queries:
    - |
      executes_task(Action, Tsk),
      is_action(Action),
      has_type(Tsk, Task),
      subclass_of(Task, soma:'PhysicalTask'),
      triple(Plan, dul:definesTask, TaskInstance),
      has_type(TaskInstance, Task),
      findall(SubTask,
        (triple(Plan, dul:hasConstituent, SubPlan),
        triple(SubPlan, dul:definesTask, SubTaskInd),
        has_type(SubTaskInd, SubTask),
        subclass_of(SubTask, soma:'PhysicalTask')),
        SubTasks).
    binding:
      var: Action
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event
      description: What are the tasks executed by the sub-actions in case of a complex task?
    binding:
      var: Tsk
      type: http://www.ease-crc.org/ont/SOMA.owl#PhysicalTask
      description: What are the sub-tasks necessary to perform the complex task according to the plan?
  - description: What is the task that follows the current task?
    queries:
    - |
      executes_task(Action, Tsk),
      is_action(Action),
      has_type(Tsk, Task),
      subclass_of(Task, soma:'PhysicalTask'),
      triple(Plan, dul:definesTask, TaskInstance),
      has_type(TaskInstance, Task),
      triple(TaskInstance, dul:precedes, NextTaskInstance),
      has_type(NextTaskInstance, NextTask),
      subclass_of(NextTask, soma:'PhysicalTask').
    binding:
      var: Tsk
      type: http://www.ease-crc.org/ont/SOMA.owl#PhysicalTask
      description: What is the task that follows the current task?
- topic: plan_task
  name: Image Schema
  description: About the task executed in the plan
  query_groups:
  - description: What is the Image schema composition of a task?
    queries:
    - |
      executes_task(Act, TaskInst),
      is_action(Act),
      has_type(TaskInst, Task),
      subclass_of(Task, soma:'PhysicalTask'),
      subclass_of(Task, Desc),
      is_restriction(Desc, some(dul:isDescribedBy, Val)),
      is_intersection_of(Val, intersection_of(TL)),
      findall(IS,
          (member(Ins, TL),
          is_restriction(Ins, some(dul:hasPart, IS))),
          Composition).
    binding:
      var: TaskInst
      type: http://www.ease-crc.org/ont/SOMA.owl#PhysicalTask
      description: What is the image schema composition of the task executed?
    binding:
      var: Act
      type: http://www.ontologydesignpatterns.org/ont/dul/DUL.owl#Event
      description: What is the image schema composition of the task executed in the action?
#################
######## Plan
######## Structure
#################
- topic: plan_structure
  name: Plan phases
  description: About how plans are composed into distinct phases.
  query_groups:
  - description: What are the direct sub-plans of a plan to perfrom a complex task?
    queries:
    - |
      triple(Plan, dul:definesTask, TaskInstance),
      has_type(TaskInstance, Task),
      subclass_of(Task, soma:'PhysicalTask'),
      findall(SubPlan,
        (triple(Plan, dul:hasConstituent, SubPlan)),
      SubPlans).
    binding:
      var: Plan
      type: http://www.ease-crc.org/ont/SOMA.owl#ActionExecutionPlan
      description: What are the sub plan of the plan?
  - description: What is task defined in the current plan?
    queries:
    - |
      triple(Plan, dul:definesTask, TaskInstance),
      has_type(TaskInstance, Task),
      subclass_of(Task, soma:'PhysicalTask').
    binding:
      var: Plan
      type: http://www.ease-crc.org/ont/SOMA.owl#ActionExecutionPlan
      description: What is the task defined in the plan?
    binding:
      var: TaskInstance
      type: http://www.ease-crc.org/ont/SOMA.owl#PhysicalTask
      description: What is the plan that defines the task?
  - description: What is the complex task, current task is part of?
    queries:
    - |
      triple(Plan, dul:definesTask, TaskInstance),
      has_type(TaskInstance, Task),
      subclass_of(Task, soma:'PhysicalTask'),
      triple(ComplexPlan, dul:hasConstituent, SubPlan),
      triple(ComplexPlan, dul:definesTask, ComplexTaskInstance).
    binding:
      var: TaskInstance
      type: http://www.ease-crc.org/ont/SOMA.owl#PhysicalTask
      description: What is the complex task, current task is part of?
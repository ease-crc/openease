version: '3'
networks:
  openease:
services:
  # Nginx serves requests on port 80/443 through rediecting
  # to flask and other web applications.
  nginx:
    image: nginx
    container_name: nginx
    #ports:
    #  - "80:80"
    #  - "443:443"
    #networks:
    #  - openease
    volumes:
      - nginx:/etc/nginx/conf.d
      - ./certs:/etc/nginx/certs
    # FIXME: For some reason this is required since switching to docker-compose,
    #        else nginx runs into timeouts when talking to ROS.
    network_mode: "host"
  
  # dockergen updates nginx configuration when new docker container appear,
  # and notifies nginx about the change.
  dockergen:
    image: jwilder/docker-gen
    container_name: docker-gen
    command: -notify-sighup nginx -watch /etc/docker-gen/templates/nginx.tmpl /etc/nginx/conf.d/default.conf
    networks:
      - openease
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./config/nginx.tmpl:/etc/docker-gen/templates/nginx.tmpl
      - ./certs:/etc/nginx/certs
      - nginx:/etc/nginx/conf.d
  
  # an interface to the docker API of the host
  dockerbridge:
    image: "openease/dockerbridge"
    container_name: dockerbridge
    networks:
      - openease
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    environment:
      - EASE_DEBUG=${EASE_DEBUG}


  # postgres is used to store e.g. user accounts, roles,
  # data displayed in the webpage
  postgres:
    image: "postgres:9.3"
    container_name: postgres
    networks:
      - openease
    volumes:
      - postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_USER=docker


  # a volume that holds a secret key
  secret_init:
    image: "busybox"
    command: sh -c '< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c 64 > /etc/ease_secret/secret'
    volumes:
      - secret:/etc/ease_secret
  
  # the openEASE flask webapp
  openease:
    image: "openease/app"
    container_name: openease
    # NOTE: wait until postgres is available before calling runserver.py
    command: /opt/webapp/webrob/scripts/wait.sh postgres python /opt/webapp/webrob/runserver.py
    ports:
      - "5000:5000"
    networks:
      - openease
    volumes:
      - secret:/etc/ease_secret:ro
      - lft:/tmp/openEASE/dockerbridge
      - content:/opt/webapp/webrob/content
      - neem_overview_images:/opt/webapp/webrob/static/img/neem-overview
    environment:
      # these are for docker-gen to recognize this container
      - VIRTUAL_HOST=openease
      - VIRTUAL_PORT=5000
      # Workaround for container using legacy Docker links
      - POSTGRES_PORT_5432_TCP_ADDR=postgres
      - POSTGRES_PORT_5432_TCP_PORT=5432
      - DOCKERBRIDGE_PORT_5001_TCP_ADDR=dockerbridge
      - DOCKERBRIDGE_PORT_5001_TCP_PORT=5001
      #
      - EASE_DEBUG=true
      - OPENEASE_USE_HOST_KNOWROB=${OPENEASE_USE_HOST_KNOWROB}
      - OPENEASE_MAIL_USERNAME=${OPENEASE_MAIL_USERNAME}
      #- OPENEASE_MAIL_PASSWORD=${OPENEASE_MAIL_PASSWORD}

  #docker_compose_ui:
    #restart: always
    #image: francescou/docker-compose-ui:1.13.0
    #container_name: docker_compose_ui
    #hostname: docker_compose_ui
    #working_dir: /opt/docker-compose-projects/
    #environment:
    #- 'WEB_CONSOLE_PATTERN=/web-console/?cid={containerName}&cmd={command}'
    #volumes:
    #- /var/run/docker.sock:/var/run/docker.sock
  #web_console:
    #image: bitbull/docker-exec-web-console
    #environment:
    #- 'CONTEXT_PATH=/web-console/'
    #read_only: true
    #restart: always
    #volumes:
    #- /var/run/docker.sock:/var/run/docker.sock


volumes:
  # large file transfer volume
  lft:
  # secret key volume
  secret:
  # sql data volume
  postgres:
  # various files for homepage & publications content
  content:
  # images for neem-overview markdowns
  neem_overview_images:
  # nginx configuration
  nginx:
  # used by KnowRob containers for additional
  # Prolog rules specific to openEASE.
  rules:
    driver: local
    driver_opts:
      o: 'bind'
      type: 'none'
      device: '$PWD/knowrob/rules'
